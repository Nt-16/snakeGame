

Main steps to follow to make this snake game;



1. creating a blank canvas and game loop . ---> DONE


2. Creating the food

-- I created a grid - basically dividing the screen into identical cell, this is going to use for the positioning 
and movement of the object in the screen.

Food class:
    -position of the food. ==> using Vector2 struct (raylib) - makes our life easier

    - created a method to draw the food in the screen
        Draw method => inside this method we call DrawRectangle(position.x*cellSize, position.y*cellSize, cellSize, cellSize, darkGreen); 
        -- takes 5 arguements becasue raylib offers a function to populate a rectangle in the screen.
            in my case i can use this rectangle as food for the snake.

    TAKING THIS TO THE NEXT LEVEL
    - I want to use image as the food 

    ---> Constructor is basically a special method in the class, it is automatically called when an instance 
    of the class is created. In my case when the food instance is created, the image file should be loaded,
    and then use raylib function to populate it in the screen. 

    ## When the food object is created, we need a constructor to load the image file

    - load the image from the folder 
    - convert that image into texture to render in the screen with raylib
    - after texture is loaded we unload the image to free the memory  

    ==> Used Draw texture method to render the image in the screen 
    ++> added a funtion to generate random x and y point so that the food will be at random position every 
        time the game is launched.

    STEP 2 CREATING THE FOOD ----> DONE


3. Creating the snake (basically a collection of cell as we consume food cell)

    -----> Using Array to creat the body of the snake 
    - body of the snake is the array of the cells
        - I am not going to store the cell in the array.
        - Storing the position of the cell is much easier and does the job!
        - Use Vector2 struct to store the x and y coordinate

    using array is very possible but there is a better way of creating the body of the snake.

    ---> deque [Double eneded queue] - to represent the snake body
        deque is the data structure that allows you to add and remove elements from both ends !

    -> I made a deque that takes Vector2 coordinates, this basically will be used to represent the snake 
    -> I used DrawRectangleRounded function to make the snake edges rounded which looks better than sharp edges.
         void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color); 
        - 4 paramater : for first parameter we use Rectangle struct which takes x, y, width and height\
        - second paramater is self explainatory 

    Step 3: Creating the snake ----> DONE



4. Moving the sanke 

    The main idea is to add a cell infront of the snake bodu and remove a cell from the tail.
    this will move the snake.
    
    to move right : remove the tail cell and add to the head cell
    to move up : remove the tail and add to the top edge of the head cell
    to move down : remove the tail and add to the bottom edge of the head cell

    ## Removing the last cell and adding a new one to the direction of the movement ##
    this will be the logic to move the snake in the screen

    

After step 4,
    Game class will be the container that will hold the snake and food oject.
    by doing so the code will look much cleaner. 
    - code will be easier to maintain, understand and expand
    - easy to find the bugs 

5. Making the snake eat the food.
    for this step, whenever the head of the snake which is the 0 index in the deque is equal to the position of the 
    food, new coordinate should be generated so that the food will render in the different position.

    there is the small probability that after eating the food the food might spawn in top of snake body
    so,
    while generating the random position for the food I wrote a new function the generates a new set 
    of coordinate of position if the generated x and y already exiist in the snake body which i.e deque<vector2>snakeBody


6. Making the snake grow longer as it eats the food.

    for this step I just have add a new segment whenever the snake head collides with the food.

     --> I made a boolean variable and initalized with false, if the snake collides
    with food, set that boolean to true and I used that boolean in the if statement to not pop the last elenent 
    in deque so that snake will add a segment whenever it eats the food. if it is false then it continues to 
    pop last element and add to the head so the snake moves without growing. 


7. Check for collision with the edge of the map and its tail.

8. Adding the title and frame. To make it look pretty
9. Kepping score 
10. (MAybe ) Adding sounds